//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.235
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.IO;
using System.IO.IsolatedStorage;

using Microsoft.Phone.Data.Linq.Mapping;
using Microsoft.Phone.Data.Linq;



public partial class dbContext : System.Data.Linq.DataContext
{
	
	public bool CreateIfNotExists()
	{
		bool created = false;
		if (!this.DatabaseExists())
		{
			string[] names = this.GetType().Assembly.GetManifestResourceNames();
			string name = names.Where(n => n.EndsWith(FileName)).FirstOrDefault();
			if (name != null)
			{
				using (Stream resourceStream = Assembly.GetExecutingAssembly().GetManifestResourceStream(name))
				{
					if (resourceStream != null)
					{
						using (IsolatedStorageFile myIsolatedStorage = IsolatedStorageFile.GetUserStoreForApplication())
						{
							using (IsolatedStorageFileStream fileStream = new IsolatedStorageFileStream(FileName, FileMode.Create, myIsolatedStorage))
							{
								using (BinaryWriter writer = new BinaryWriter(fileStream))
								{
									long length = resourceStream.Length;
									byte[] buffer = new byte[32];
									int readCount = 0;
									using (BinaryReader reader = new BinaryReader(resourceStream))
									{
										// read file in chunks in order to reduce memory consumption and increase performance
										while (readCount < length)
										{
											int actual = reader.Read(buffer, 0, buffer.Length);
											readCount += actual;
											writer.Write(buffer, 0, actual);
										}
									}
								}
							}
						}
						created = true;
					}
					else
					{
						this.CreateDatabase();
						created = true;
					}
				}
			}
			else
			{
				this.CreateDatabase();
				created = true;
			}
		}
		return created;
	}
	
	public bool LogDebug
	{
		set
		{
			if (value)
			{
				this.Log = new DebugWriter();
			}
		}
	}
	
	public static string ConnectionString = "Data Source=isostore:/db.sdf";

	public static string ConnectionStringReadOnly = "Data Source=appdata:/db.sdf;File Mode=Read Only;";

	public static string FileName = "db.sdf";

	public dbContext(string connectionString) : base(connectionString)
	{
		OnCreated();
	}
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertSIMPLE_RELATION_1(SIMPLE_RELATION_1 instance);
  partial void UpdateSIMPLE_RELATION_1(SIMPLE_RELATION_1 instance);
  partial void DeleteSIMPLE_RELATION_1(SIMPLE_RELATION_1 instance);
  partial void InsertSIMPLE_RELATION_2(SIMPLE_RELATION_2 instance);
  partial void UpdateSIMPLE_RELATION_2(SIMPLE_RELATION_2 instance);
  partial void DeleteSIMPLE_RELATION_2(SIMPLE_RELATION_2 instance);
  partial void InsertTABLE_WITH_1_COLUMN(TABLE_WITH_1_COLUMN instance);
  partial void UpdateTABLE_WITH_1_COLUMN(TABLE_WITH_1_COLUMN instance);
  partial void DeleteTABLE_WITH_1_COLUMN(TABLE_WITH_1_COLUMN instance);
  partial void InsertTABLE_WITH_2_COLUMNS(TABLE_WITH_2_COLUMNS instance);
  partial void UpdateTABLE_WITH_2_COLUMNS(TABLE_WITH_2_COLUMNS instance);
  partial void DeleteTABLE_WITH_2_COLUMNS(TABLE_WITH_2_COLUMNS instance);
  partial void InsertTABLE_WITH_5_COLUMNS(TABLE_WITH_5_COLUMNS instance);
  partial void UpdateTABLE_WITH_5_COLUMNS(TABLE_WITH_5_COLUMNS instance);
  partial void DeleteTABLE_WITH_5_COLUMNS(TABLE_WITH_5_COLUMNS instance);
  #endregion
	
	public System.Data.Linq.Table<SIMPLE_RELATION_1> SIMPLE_RELATION_1
	{
		get
		{
			return this.GetTable<SIMPLE_RELATION_1>();
		}
	}
	
	public System.Data.Linq.Table<SIMPLE_RELATION_2> SIMPLE_RELATION_2
	{
		get
		{
			return this.GetTable<SIMPLE_RELATION_2>();
		}
	}
	
	public System.Data.Linq.Table<TABLE_WITH_1_COLUMN> TABLE_WITH_1_COLUMN
	{
		get
		{
			return this.GetTable<TABLE_WITH_1_COLUMN>();
		}
	}
	
	public System.Data.Linq.Table<TABLE_WITH_2_COLUMNS> TABLE_WITH_2_COLUMNS
	{
		get
		{
			return this.GetTable<TABLE_WITH_2_COLUMNS>();
		}
	}
	
	public System.Data.Linq.Table<TABLE_WITH_5_COLUMNS> TABLE_WITH_5_COLUMNS
	{
		get
		{
			return this.GetTable<TABLE_WITH_5_COLUMNS>();
		}
	}
}